--------------------------------------------------------------------------------
--  File:       {{block.name|lower}}_ctrl.vhd
--  Desc:       Autogenerated block control module.
--
--  Author:     Isa Uzun - Diamond Light Source
--------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;
use work.addr_defines.all;
use work.top_defines.all;

entity {{block.name|lower}}_ctrl is
port (
    -- Clock and Reset
    clk_i               : in std_logic;
    reset_i             : in std_logic;
    bit_bus_i            : in bit_bus_t;
    pos_bus_i            : in pos_bus_t;
    -- Block Parameters
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time'] %}
    {{regname}}       : out std_logic_vector(31 downto 0);
    {{regname}}_WSTB  : out std_logic;
{%      elif reg[1].cls in ['read'] %}
    {{regname}}       : in  std_logic_vector(31 downto 0);
{%      endif %}
{%  endfor %}
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['bit_mux'] %}
    {{fieldname|lower}}_o : out std_logic;
{%      endif %}
{%  endfor %}
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['pos_mux'] %}
    {{fieldname|lower}}_o : out std_logic_vector(31 downto 0);
{%      endif %}
{%  endfor %}
    -- Memory Bus Interface
    read_strobe_i       : in  std_logic;
    read_address_i      : in  std_logic_vector(BLK_AW-1 downto 0);
    read_data_o         : out std_logic_vector(31 downto 0);
    read_ack_o          : out std_logic;

    write_strobe_i      : in  std_logic;
    write_address_i     : in  std_logic_vector(BLK_AW-1 downto 0);
    write_data_i        : in  std_logic_vector(31 downto 0);
    write_ack_o         : out std_logic
);
end {{block.name|lower}}_ctrl;

architecture rtl of {{block.name|lower}}_ctrl is

signal read_addr        : natural range 0 to (2**read_address_i'length - 1);
signal write_addr       : natural range 0 to (2**write_address_i'length - 1);

{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['bit_mux', 'pos_mux'] %}
signal {{regname}}      : std_logic_vector(31 downto 0);
signal {{regname}}_WSTB : std_logic;
{%      endif %}
{%  endfor %}

begin

-- Unused outputs
read_ack_o <= '0';
write_ack_o <= '0';

read_addr <= to_integer(unsigned(read_address_i));
write_addr <= to_integer(unsigned(write_address_i));

--
-- Control System Interface
--
REG_WRITE : process(clk_i)
begin
    if rising_edge(clk_i) then
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time', 'bit_mux', 'pos_mux'] %}
        {{regname}}_WSTB <= '0';
{%      endif %}
{%  endfor %}

        if (write_strobe_i = '1') then
            -- Input Select Control Registers
{%  for regname, reg in block.registers.iteritems() %}
{%      if reg[1].cls in ['param', 'write', 'table', 'time', 'bit_mux', 'pos_mux'] %}
            if (write_addr = {{block.name}}_{{regname}}) then
                {{regname}} <= write_data_i;
                {{regname}}_WSTB <= '1';
            end if;
{%      endif %}
{%  endfor %}

        end if;
    end if;
end process;

--
-- Status Register Read
--
REG_READ : process(clk_i)
begin
    if rising_edge(clk_i) then
        case (read_addr) is
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['read'] %}
            when {{block.name}}_{{fieldname}} =>
                read_data_o <= {{fieldname}};
{%      endif %}
{%  endfor %}
            when others =>
                read_data_o <= (others => '0');
        end case;
    end if;
end process;

--
-- Instantiate Delay Blocks for System and Position Bus Fields
--
{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['bit_mux'] %}
bitmux_{{fieldname}} : entity work.bitmux
port map (
    clk_i       => clk_i,
    bit_bus_i    => bit_bus_i,
    bit_o       => {{fieldname|lower}}_o,
    BITMUX_SEL  => {{fieldname}},
    BIT_DLY     => {{fieldname}}_DLY
);

{%      endif %}
{%  endfor %}


{%  for fieldname, field in block.fields.iteritems() %}
{%      if field.cls in ['pos_mux'] %}
posmux_{{fieldname}} : entity work.posmux
port map (
    clk_i       => clk_i,
    pos_bus_i    => pos_bus_i,
    posn_o      => {{fieldname|lower}}_o,
    POSMUX_SEL  => {{fieldname}},
    POS_DLY     => (others => '0') --{{fieldname}}_DLY
);
{%      endif %}
{%  endfor %}

end rtl;
